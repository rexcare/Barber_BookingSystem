@using App.Domain
@using Microsoft.AspNetCore.Identity
@using App.Domain.Identity
@using Base.Extensions
@inject SignInManager<AppUser> _signInManager
@inject UserManager<AppUser> _userManager

@{
    ViewData["Title"] = "Booking ";
    var Service = (Service?)ViewData["service"];
    var Barbers = (IEnumerable<AppUser>?)ViewData["barber"];
    int counts = 0;
}

<a asp-action="index" style="font-size:26px; text-decoration: none;"><i class="fa fa-angle-left"></i> &nbsp&nbspback</a>


<div class="row" style="justify-content:space-around; margin-top: 10px;">
    <div class="col col-xl-7 col-lg-7 col-md-7 col-sm-12 col-12 my-3">
        <div class="row mx-3">
            <h1>@Service?.Name</h1>
            <p>@Service?.Description</p>
        </div>
        <div id="stepper1" class="bs-stepper">
            <div class="bs-stepper-header">
                <div class="step" data-target="#test-l-1">
                    <button type="button" class="btn step-trigger">
                        <span class="bs-stepper-circle">1</span>
                        <span class="bs-stepper-label">Barber</span>
                    </button>
                </div>
                <div class="line"></div>
                <div class="step" data-target="#test-l-2">
                    <button type="button" class="btn step-trigger">
                        <span class="bs-stepper-circle">2</span>
                        <span class="bs-stepper-label">Date and Time</span>
                    </button>
                </div>
                <div class="line"></div>
                <div class="step" data-target="#test-l-3">
                    <button type="button" class="btn step-trigger">
                        <span class="bs-stepper-circle">3</span>
                        <span class="bs-stepper-label">Contact Info</span>
                    </button>
                </div>
            </div>
            <div class="bs-stepper-content">
                <div id="test-l-1" class="content">
                    <div class="row">
                        
                        <form class="requires-validation" novalidate id="barberForm">
                            <select class="form-select mt-3" required id="barberId" onselect="selectBarber()">
                                <option selected disabled value="">Please select a Barber to book</option>
                                @foreach (var item in Barbers!)
                                {
                                    @if (item?.WorkTimes?.Count != 0)
                                    {
                                        counts++;
                                        <option value="@item?.Id">@item?.FirstLastName</option>
                                    }
                                }
                            </select>
                            <div class="valid-feedback">You selected a position!</div>
                            <div class="invalid-feedback">Please select a position!</div>
                            <div class="text-primary">
                                @if (counts == 0)
                                {
                                    <p>There is no available barber</p>
                                }
                                @if (counts == 1)
                                {
                                    <p>There is an available barber</p>
                                }
                                @if (counts > 1)
                                {
                                    <p>There are @counts available barbers</p>
                                }
                            </div>
                        </form>
                        
                        

                        <div style="display: flex; justify-content: center">
                            <button class="btn btn-primary w-100 mx-2" id="reserveBtn" onclick="validateBarber()">Next</button>
                        </div>
                    </div>
                </div>

                <div id="test-l-2" class="content">
                    <div mbsc-page class="demo-appointment-booking">
                        <div class="md-calendar-booking">
                            <div class="mbsc-form-group">
                                <div class="mbsc-form-group-title">
                                    <p class="h3" style="margin: 0px 0px 0px 0px;"> </p>
                                    <p><small>Eastern European Summer Time(GMT+3)</small></p>
                                </div>
                                <hr />
                                <div id="demo-booking-datetime" class="booking-datetime"></div>
                            </div>
                        </div>
                    </div>
                    <div style="display: flex; justify-content: center">
                        <button class="btn btn-primary w-100 mx-2" onclick="stepper1.next()">Next</button>
                        <button class="btn btn-warning w-100 mx-2" onclick="backStep()">Back</button>
                    </div>
                </div>

                <div id="test-l-3" class="content">
                    <div class="row">
                        <form class="requires-validation" novalidate id="contactForm">
                            <div class="col-md-12">
                                <input class="form-control" type="text" name="firstName" id="firstName" placeholder="Sander" required>
                                <div class="valid-feedback">Fist name field is valid!</div>
                                <div class="invalid-feedback">First name field cannot be blank!</div>
                            </div>

                            <div class="col-md-12">
                                <input class="form-control" type="text" name="lastName" id="lastName" placeholder="Koppel" required>
                                <div class="valid-feedback">Last name field is valid!</div>
                                <div class="invalid-feedback">Last name field cannot be blank!</div>
                            </div>

                            <div class="col-md-12">
                                <input class="form-control" type="email" id="email" name="email" placeholder="admin@example.com" required>
                                <div class="valid-feedback">Email field is valid!</div>
                                <div class="invalid-feedback">Email field cannot be blank!</div>
                            </div>

                            <div class="col-md-12">
                                <input class="form-control" type="text" id="phone" name="phone" placeholder="3726329598" required>
                                <div class="valid-feedback">PhoneNumber field is valid!</div>
                                <div class="invalid-feedback">PhoneNumber field cannot be blank!</div>
                            </div>

                            <div style="display: flex; justify-content: center">
                                <button class="btn btn-primary w-100 mx-2" id="reserveBtn" onclick="validateContact()">Reserve</button>
                                <button class="btn btn-warning w-100 mx-2" onclick="backStep()">Back</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12 my-4">
        <div class="card border-primary mb-3" style="min-width: 16rem;">
            <div class="card-header" style="text-align: center">Service Detail</div>
            <div class="card-body text-primary">
                <figure>
                    <blockquote class="blockquote">
                        <p style="text-transform: capitalize;">@Service?.Name</p>
                        <p id="bookTime">April 20, 2023 at 10:00 am</p>
                    </blockquote>
                    <figcaption class="blockquote-footer">
                        <p>@Service?.Description</p>
                        <p>@Service?.TimeSpan</p>
                        <p>$@Service?.Price</p>
                    </figcaption>
                </figure>
                <hr />
                <figure>
                    <blockquote class="blockquote">
                        <p style="text-transform: capitalize;" id="contact_fullName"></p>
                        <p id="contact_email"></p>
                        <p id="contact_phone"></p>
                    </blockquote>
                </figure>
            </div>
            @*<div class="card-footer bg-transparent border-primary" style="text-align: center">@@#@@</div>*@
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="modal" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="staticBackdropLabel">Confirm</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div style="display: flex; justify-content: center; align-items: center; flex-direction: column;">
                    <h5 class="text-primary">Popover in a modal</h5>
                    <p>This triggers a popover on click.</p>
                </div>
                <div class="card border-primary mb-3" style="min-width: 16rem; height: 100%;">
                    <div class="card-body text-primary" style="display:flex">
                        <div class="calendar-icon">
                            <a asp-action="index" class="text-secondary" style="font-size:100px; text-decoration: none;"><i class="fa fa-light fa-calendar"></i></a>
                        </div>
                        <div class="w-100">
                            <figure>
                                <blockquote class="blockquote">
                                    <p style="text-transform: capitalize;">@Service?.Name</p>
                                    <p id="bookTime">April 20, 2023 at 10:00 am</p>
                                </blockquote>
                                <figcaption class="blockquote-footer">
                                    <p>@Service?.Description</p>
                                    <p>@Service?.TimeSpan</p>
                                    <p>@Service?.Price</p>
                                </figcaption>
                            </figure>
                            <hr />
                            <div class="w-50" style="float: right">
                                <div class="space-between">
                                    <p>Subtotal</p>
                                    <p>$@Service?.Price</p>
                                </div>
                                <div class="space-between">
                                    <p>Sales Tax</p>
                                    <p>$0</p>
                                </div>
                                <hr />
                                <div class="space-between">
                                    <p>Total</p>
                                    <p>$@Service?.Price</p>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
            <div class="modal-footer" style="display: flex; justify-content: center;">
                <button type="button" class="btn btn-primary w-50" onclick="Reserve()">OK</button>
            </div>
        </div>
    </div>
</div>

<script src="~/js/moment.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bs-stepper/dist/js/bs-stepper.min.js"></script>
<script src="~/js/mobiscroll.javascript.min.js"></script>
<script>

    var stepper1Node = document.querySelector('#stepper1')
    var stepper1 = new Stepper(document.querySelector('#stepper1'))

</script>

<script>

    var barberId = document.getElementById("barberId").value;
    function backStep() {
        event.preventDefault();
        event.stopPropagation();
        stepper1.previous()
    }

    function validateBarber() {
        event.preventDefault();
        event.stopPropagation();
        const form = document.querySelector('#barberForm')
        if (form.checkValidity()) {
            stepper1.next();
            mobiscollInit();
        }
        form.classList.add('was-validated')
    }

    function validateContact() {
        event.preventDefault();
        event.stopPropagation();
        const form = document.querySelector('#contactForm')
        if (form.checkValidity()) {
            toggleModal();
        }
        form.classList.add('was-validated')
    }

    function toggleModal() {
        var myModal = new bootstrap.Modal(document.getElementById('modal'), {
            keyboard: false
        });

        myModal.toggle();
    }

    function Reserve() {
        CreateCustomer();
    }

    function CreateCustomer() {
        let data = {
            FirstName: document.getElementById('firstName').value,
            LastName: document.getElementById('lastName').value,
            Email: document.getElementById('email').value,
            Phone: document.getElementById('phone').value,
        }
        $.ajax({
            type: 'POST',
            url: '/Appointment/CreateCustomer',
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8', // when we use .serialize() this generates the data in query string format. this needs the default contentType (default content type is: contentType: 'application/x-www-form-urlencoded; charset=UTF-8') so it is optional, you can remove it
            data: data,
            success: function (result) {
                if (result == "error") {
                    alert('Failed to receive the Data');
                    console.log('Failed ');
                }
                else {
                    CreateAppointment(result);
                }

            },
            error: function () {
                alert('Error occures to receive the Data');
                console.log('Error occures ');
            }
        })
    }

    function CreateAppointment(result) {
        let appointmentData = {
            CustomerId: result,
            ServiceId: '@Service?.Id',
            AppUserId: document.getElementById("barberId").value,
            StartTime: moment(hel).format("YYYY-MM-DD HH:mm:ss"),
        }
        $.ajax({
            type: 'POST',
            url: '/Appointment/CreateAppointment',
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8', // when we use .serialize() this generates the data in query string format. this needs the default contentType (default content type is: contentType: 'application/x-www-form-urlencoded; charset=UTF-8') so it is optional, you can remove it
            data: appointmentData,
            success: function (result) {
                if (result == "error") {
                    alert('Failed to reserve the Data');
                    console.log('Failed ');
                }
                else {
                    alert('Successfully reserve Data ');
                    location.href = "/Appointment"
                }
            },
            error: function () {
                alert('Error occures to reserve the Data');
                console.log('Error occures ');
            }
        })

    }

</script>

<script>

    var  workTimes = [];

    function mobiscollInit() {
        mobiscroll.setOptions({
            local: mobiscroll.localeEn,
            theme: 'windows',                            // Specify theme like: theme: 'ios' or omit setting to use default
            themeVariant: 'light'                    // More info about themeVariant: https://docs.mobiscroll.com/5-23-0/javascript/calendar#opt-themeVariant
        });

        var min = moment().format("YYYY-MM-DD");
        var max = moment().add(10, 'days').format("YYYY-MM-DD");

        mobiscroll.datepicker('#demo-booking-datetime', {
            display: 'inline',                       // Specify display mode like: display: 'bottom' or omit setting to use default
            controls: ['calendar', 'timegrid'],
            timeFormat: 'HH:mm',
            min: min,                                // More info about min: https://docs.mobiscroll.com/5-23-0/javascript/calendar#opt-min
            max: max,                                // More info about max: https://docs.mobiscroll.com/5-23-0/javascript/calendar#opt-max
            minTime: '0:00',
            maxTime: '23:00',
            stepMinute: 60,
            width: null,                             // More info about width: https://docs.mobiscroll.com/5-23-0/javascript/calendar#opt-width
            onPageLoading: function (event, inst) {  // More info about onPageLoading: https://docs.mobiscroll.com/5-23-0/javascript/calendar#event-onPageLoading
                getDatetimes(event.firstDay, function callback(bookings) {
                    if(moment().diff(bookings.min, 'days')>0)
                        bookings.min = moment().format("YYYY-MM-DD");
                    inst.setOptions({
                        min: moment(bookings.min).subtract(3, "hours"),
                        max: bookings.max,
                        labels: bookings.labels,     // More info about labels: https://docs.mobiscroll.com/5-23-0/javascript/calendar#opt-labels
                        invalid: bookings.invalid    // More info about invalid: https://docs.mobiscroll.com/5-23-0/javascript/calendar#opt-invalid
                    });
                });


            },
            onChange: function (event, inst) {  // More info about onChange: https://docs.mobiscroll.com/5-23-0/javascript/calendar#event-onChange
                hel = inst.getVal();
                document.getElementById("bookTime").innerHTML = moment(hel).format("MMMM DD, YYYY [at] hh:mm a");

            }
        });
    }

    function getDatetimes(day, callback) {
        var invalid = [];
        var labels = [];
        var max = moment();
        var min = moment();
        var dates = [];

        let data = {
            Id: document.getElementById("barberId").value,
        }
        $.ajax({
            type: 'POST',
            url: '/Appointment/getWorkingTimes',
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8', // when we use .serialize() this generates the data in query string format. this needs the default contentType (default content type is: contentType: 'application/x-www-form-urlencoded; charset=UTF-8') so it is optional, you can remove it
            data: data,
            success: function (result) {
                workTimes =result;
                if (result == "error") {
                    alert('Failed to receive the Data');
                    console.log('Failed ');
                }
                else {
                    let data = result[0]
                    

                    for (j = 0; j < result.length; j++) {
                        min = moment(result[0]?.date);
                        max = moment(result.slice(-1)[0]?.date).add(1, 'days');
                        const businessDays = getBusinessDays(min, max, result);
                        invalid = invalid.concat(businessDays);
                        invalid.push(moment(max).format("YYYY-MM-DD"));

                        let invalidDate = moment(result[j]?.date)
                        let times = [];
                        start = parseInt(result[j]?.startTime.substr(0, 2));
                        stop = parseInt(result[j]?.stopTime.substr(0, 2));
                        start1 = parseInt(result[j]?.startTime1?.substr(0, 2));
                        stop1 = parseInt(result[j]?.stopTime1?.substr(0, 2));
                        start2 = parseInt(result[j]?.startTime2?.substr(0, 2));
                        stop2 = parseInt(result[j]?.stopTime2?.substr(0, 2));
                        for(i=0;i<24;i++)
                        {
                            if (!(((start - 1) < i && i < (stop)) || ((start1 - 1) < i && i < (stop1)) || ((start2 - 1) < i && i < (stop2)))) {
                                invalidDate.set({h: i, m: 0})
                                let startTime = invalidDate;
                                let endTime = invalidDate;
                                let flag = {
                                    start: moment(startTime).format("YYYY-MM-DD HH:mm"),
                                    end: moment(endTime).format("YYYY-MM-DD HH:mm")
                                }
                                invalid = [
                                    ...invalid,
                                    flag
                                ];
                            }
                        }
                    }
                }
            },
            error: function () {
                alert('Error occures to receive the Data');
                console.log('Error occures ');
            }
        })
        // get booking times
        $.ajax({
            type: 'POST',
            url: '/Appointment/BookPlan',
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8', // when we use .serialize() this generates the data in query string format. this needs the default contentType (default content type is: contentType: 'application/x-www-form-urlencoded; charset=UTF-8') so it is optional, you can remove it
            data: data,
            success: function (result) {
                if (result == "error") {
                    alert('Failed to receive the Data');
                    console.log('Failed ');
                }
                else {
                    for (var i = 0; i < result.length; ++i) {
                        flag = {
                            start: moment(result[i]).subtract(3, 'hours'),
                            end: moment(result[i]).subtract(3, 'hours')
                        }
                        invalid.push(flag);
                    }
                    
                    callback({ invalid: invalid, labels: [], max: max, min:min });
                }

            },
            error: function () {
                alert('Error occures to receive the Data');
                console.log('Error occures ');
            }
        })

    }

    function getBusinessDays (startDate, endDate, excludeDays) {
        const start = new Date(startDate);
        const end = new Date(endDate);
        const current = new Date(startDate);
        const dates = [];

        while (current <= end) {
            if (!isContainDate(excludeDays, current)) {
                dates.push(new Date(current));
            }

            current.setDate(current.getDate() + 1);
        }

        return dates;
    }

    function isContainDate(Days, date) {
        for(i=0;i<Days.length;i++){
            if (moment(Days[i].date).format("YYYY-MM-DD") == moment(date).format("YYYY-MM-DD")){
                return true;
            }
        }
        return false;
    }

    function isContainTime(Times, Time) {
        for (i = 0; i < Times.length; i++) {
            if (moment(Times[i]).format("HH") == moment(Time).format("HH")) {
                return true;
            }
        }
        return false;
    }

</script>

<link rel="stylesheet" href="~/css/Form.css" asp-append-version="true" />
<link rel="stylesheet" href="~/css/mobiscroll.javascript.min.css" />
<script src="~/lib/jquery/dist/jquery.min.js"></script>