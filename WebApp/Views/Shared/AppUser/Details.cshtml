@using App.Domain
@model App.Domain.Identity.AppUser

@using Microsoft.AspNetCore.Identity
@using App.Domain.Identity
@using Base.Extensions
@inject SignInManager<AppUser> _signInManager
@inject UserManager<AppUser> _userManager
@{
    var appointments = (IEnumerable<Appointment>?)ViewData["appointments"];
    var uuid = ViewData["id"];
    ViewData["Title"] = "Details";
    var index = 0;
}

<a asp-controller="Home" asp-action="MemberList" style="font-size:26px; text-decoration: none;"><i class="fa fa-angle-left"></i> &nbsp&nbspback</a>

<div class="card shadow mb-4 p-4" style="height: calc(100vh - 150px); top: 10px">
    <div class="row">
        <div class="col-lg-4 col-md-5 col-sm-12">
            @if (User.IsInRole("user"))
            {
                <table class="table table-bordered table-striped table-hover">
                    <thead>
                    <tr>
                        <th>
                            Work Time
                        </th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (WorkTime item in @Model!.WorkTimes!.OrderBy(c => c.Date).ThenBy(c => c.StartTime))
                    {
                        <tr>
                            <td>
                                <a style="text-decoration: none" class="nav-item text-dark">@Html.DisplayFor(modelItem => item.DateTime)</a>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            }
        </div>
        <div class="col-lg-8 col-md-7 col-sm-12">
            <div class="mb-2" style="display: flex; justify-content: center;">
                <div class="address-card card border p-3">
                    <div style="display: flex;">
                        <h1>@Html.DisplayFor(model => model.FirstLastName)</h1>
                    </div>

                    <div>
                        <dl class="row row-bordered row-striped row-hover">
                            <dt class="col-sm-4">
                                @Html.DisplayNameFor(model => model.FirstName)
                            </dt>
                            <dd class="col-sm-8">
                                @Html.DisplayFor(model => model.FirstName)
                            </dd>
                            <dt class="col-sm-4">
                                @Html.DisplayNameFor(model => model.LastName)
                            </dt>
                            <dd class="col-sm-8">
                                @Html.DisplayFor(model => model.LastName)
                            </dd>
                            <dt class="col-sm-4">
                                @Html.DisplayNameFor(model => model.Email)
                            </dt>
                            <dd class="col-sm-8">
                                @Html.DisplayFor(model => model.Email)
                            </dd>
                            <dt class="col-sm-4">
                                @Html.DisplayNameFor(model => model.PhoneNumber)
                            </dt>
                            <dd class="col-sm-8">
                                @Html.DisplayFor(model => model.PhoneNumber)
                            </dd>


                        </dl>
                    </div>
                </div>
            </div>

            <div id="wrapper">
                <!-- Calendar element -->
                <div id="events-calendar" data-month-format="month YYYY"></div>

                <div class="row">

                    <!-- Events -->
                    <div id="events"></div>
                </div>
            </div>
        </div>
    </div>
</div>
@foreach (var item in appointments!)
{
    var customer = (Customer?)item.Customer;
    <!-- Modal -->
    <div class="modal fade" id="a-@item.Id" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel"></h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div style="display: flex; justify-content: center; align-items: center; flex-direction: column;">
                        <h5 class="text-primary">Appointment</h5>

                        <div class="card border mb-3" style="min-width: 16rem; height: 100%; width: 100%">
                            <div class="card-body text-primary" style="display:flex">
                                <div class="calendar-icon">
                                        <i class="fa fa-light fa-calendar text-secondary" style="font-size:100px; text-decoration: none;"></i>
                                </div>
                                <div class="w-100">
                                    <figure>
                                        <blockquote class="blockquote text-black">
                                            <p style="text-transform: capitalize;">Name : @item?.Customer?.FirstLastName</p>
                                            <p id="bookTime">Time&nbsp;&nbsp;: @item?.StartTime</p>
                                        </blockquote>
                                        <figcaption class="blockquote-footer">
                                            <p>Type&nbsp;: @item?.Service?.Name</p>
                                            <p>Span&nbsp;: @item?.Service?.TimeSpan</p>
                                            <p>Price&nbsp;: $@item?.Service?.Price</p>
                                        </figcaption>
                                    </figure>
                                </div>

                            </div>
                        </div>
                    </div>

                </div>
                <div class="modal-footer" style="display: flex; justify-content: center; flex-wrap: nowrap">
                    <button type="button" class="btn btn-primary w-50" data-bs-dismiss="modal" aria-label="Close">OK</button>

                    @if (User.IsInRole("admin"))
                    {
                        <button type="button" class="btn btn-danger w-50">Cancel appointment</button>
                    }


                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="b-@item?.Id" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
        <div class="modal-dialog modal-md modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel">Confirm</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div style="display: flex; justify-content: center; align-items: center; flex-direction: column;">
                        <h5 class="text-primary">Confirm delete</h5>
                    </div>

                </div>
                <div class="modal-footer" style="display: flex; justify-content: center; flex-wrap: nowrap">
                    <a class="btn btn-danger w-50"
                   asp-action="DeleteAppointment"
                   asp-route-id="@item?.Id"
                   asp-route-uid="@User.GetUserId()">
                        Cancel Appointment
                    </a>
                    <button type="button" class="btn btn-info w-50">Close</button>
                </div>
            </div>
        </div>
    </div>

}

<link rel="stylesheet" href="~/css/calendar.css" asp-append-version="true" />
<link rel="stylesheet" type="text/css" href="~/css/jsCalendar.css">

<script src="~/js/moment.js"></script>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script type="text/javascript" src="~/js/jsCalendar.js"></script>


<script>

    function cancel(id) {
        let data = {
            id: id
        }
        $.ajax({
            type: 'POST',
            url: '/Appointment/DeleteAppointment',
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8', // when we use .serialize() this generates the data in query string format. this needs the default contentType (default content type is: contentType: 'application/x-www-form-urlencoded; charset=UTF-8') so it is optional, you can remove it
            data: data,
            success: function (result) {
                if (result == "error") {
                    alert('Failed to reserve the Data');
                    console.log('Failed ');
                }
                else {
                    alert('Successfully reserve Data ');
                }
            },
            error: function () {
                alert('Error occures to reserve the Data');
                console.log('Error occures ');
            }
        })
    }

    function toggleModal(id) {
        console.log(id)
        var myModal = new bootstrap.Modal(document.getElementById('a-' + id), {
            keyboard: false
        });

        myModal.toggle();
    }

</script>

<script type="text/javascript">
    function isContainDate(Days, date) {
        for (i = 0; i < Days.length; i++) {
            if (moment(Days[i].date).format("YYYY-MM-DD") == moment(date).format("YYYY-MM-DD")) {
                return true;
            }
        }
        return false;
    }

    generatecalendar()

    async function generatecalendar() {
        // Get elements
        document.getElementById("events-calendar").innerHTML = "";
        document.getElementById("events").innerHTML = "";
        var elements = {
            // Calendar element
            calendar: document.getElementById("events-calendar"),
            // Input element
            events: document.getElementById("events")
        }

        // Create the calendar
        elements.calendar.className = "material-theme custom-green";
        var calendar = jsCalendar.new(elements.calendar);

        //
        let data = {
            Id: '@uuid',
        }
        var mindate = moment();
        var workTimes = [];
        var events = {
        };
        var times = {}

        await $.ajax({
            type: 'POST',
            url: '/Appointment/getWorkingTimes',
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8', // when we use .serialize() this generates the data in query string format. this needs the default contentType (default content type is: contentType: 'application/x-www-form-urlencoded; charset=UTF-8') so it is optional, you can remove it
            data: data,
            success: function (result) {
                workTimes = result;
                if (result == "error") {
                    alert('Failed to receive the Data');
                    console.log('Failed ');
                }
                else {
                    console.log(result);

                    workTimes = result;
                    //set min max month
                    if (moment().diff(result[0].date, 'days') > 0)
                    {
                        mindate = moment().format("MM/DD/YYYY");
                        tmp_mindate = moment().format("DD/MM/YYYY");
                    }
                    else
                    {
                        mindate = moment(result[0].date).format("MM/DD/YYYY");
                        tmp_mindate = moment(result[0].date).format("DD/MM/YYYY");
                    }
                    calendar.min(tmp_mindate);
                    calendar.max(moment(result[result.length - 1].date).format("DD/MM/YYYY"));
                    calendar.set(tmp_mindate);
                }
            },
            error: function () {
                alert('Error occures to receive the Data');
                console.log('Error occures ');
            }
        })
        // get booking times
        await $.ajax({
            type: 'POST',
            url: '/Appointment/readAppointmentsById',
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
            data: data,
            success: function (result) {
                if (result == "error") {
                    alert('Failed to receive the Data');
                    console.log('Failed ');
                }
                else {
                    var mainData = JSON.parse(result);
                    var colors = [
                        "#198754",
                        "#0D6EFD",
                        "#FFC107",
                        "#8540F5",
                        "#4DD4AC"
                    ];
                    for (i = 0; i < mainData.length; i++) {
                        let tId = moment(mainData[i].StartTime).format("MM/DD/YYYY");
                        console.log(tId)
                        let val = parseInt(moment(mainData[i].StartTime).subtract(3, 'hours').format("H"));
                        // If no events, create list
                        if (!events.hasOwnProperty(tId)) {
                            // Create list
                            events[tId] = [];
                        }
                        events[tId].push({
                            time: val,
                            id: mainData[i].Id,
                            name: mainData[i].Customer.FirstLastName,
                            service: mainData[i].Service.Name,
                            price: mainData[i].Service.Price,
                        });
                    }

                }
            },
            error: function () {
                alert('Error occures to receive the Data');
                console.log('Error occures ');
            }
        })

        console.log('events', events)
        //
        // Make changes on the date elements that disbled
        calendar.onDateRender(function (date, element, info) {
            if (!isContainDate(workTimes, date)) {
                element.style.color = '#CACACA'
            }
        });
        //
        // Create events elements
        elements.title = document.createElement("div");
        elements.title.className = "title";
        elements.events.appendChild(elements.title);
        elements.subtitle = document.createElement("div");
        elements.subtitle.className = "subtitle";
        elements.events.appendChild(elements.subtitle);
        elements.list = document.createElement("div");
        elements.list.className = "list";
        elements.events.appendChild(elements.list);
        elements.actions = document.createElement("div");
        elements.actions.className = "action";
        elements.events.appendChild(elements.actions);
        elements.addButton = document.createElement("input");

        // Refresh layout
        calendar.refresh();


        // var date_format = "DD/MM/YYYY";
        var current = null;

        var showEvents = function (date) {
            console.log("datedate", date)
            // getDatetimes(date)
            // Date string
            // var id = jsCalendar.tools.dateToString(date, date_format, "en");
            var id = moment(date).format("MM/DD/YYYY");
            // Set date
            // current = new Date(moment(mindate).format("YYYY"), moment(mindate).subtract(1, 'months').format("MM"), moment(mindate).format("DD"));
            console.log("curent", current)
            // Set title
            elements.title.textContent = id;
            // Clear old events
            elements.list.innerHTML = "";
            // Add events on list
            if (events.hasOwnProperty(id) && events[id].length) {
                // Number of events
                elements.subtitle.textContent = events[id].length + " " + ((events[id].length > 1) ? "times are" : "time is") + " available.";

                var div;
                var close;
                for (var i = 0; i < events[id].length; i++) {
                    div = document.createElement("div");
                    div.className = "event-item-i";
                    elements.list.appendChild(div);

                    sText = document.createElement("div");
                    sText.className = "";

                    let time = ''
                    if (events[id][i] < 10)
                        time = `0${events[id][i].time} : 00`;
                    else
                        time = `${events[id][i].time} : 00`;
                    sText.textContent = time + " " + events[id][i].name + ". ";
                    div.appendChild(sText);

                    sType = document.createElement("span");
                    sType.className = "mx-2 px-2 item-tag";
                    sType.textContent = " " + events[id][i].service + " ";
                    sText.appendChild(sType);


                    div.addEventListener("click", (function (date, index) {
                        return function () {
                            toggleModal(events[id][index]?.id, "info")
                        }
                    })(date, i), false);

                }
            } else {
                elements.subtitle.textContent = "No events";
            }
        };

        // Show current date events
        // showEvents(new Date(moment(mindate).format("YYYY"), moment(mindate).subtract(1, "days").format("DD"), moment(mindate).format("MM")));
        console.log('asdfasdfasdf',moment(mindate).format("MM/DD/YYYY"));
        showEvents(moment(mindate).format("MM/DD/YYYY"))

        // Add events
        calendar.onDateClick(function (event, date) {
            // Update calendar date
            if (isContainDate(workTimes, date)) {
                calendar.set(date);
                // Show events
                showEvents(date);
            }
        });

    }

</script>
